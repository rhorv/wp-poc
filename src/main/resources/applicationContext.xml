<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="
                http://www.springframework.org/schema/beans
                http://www.springframework.org/schema/beans/spring-beans.xsd">

  <bean id="rjs1SchemaFileProvider" class="events.formatter.schemaprovider.FileBasedSchemaProvider">
    <constructor-arg value="src/main/resources/schema/rjs1/generic.json"/>
    <constructor-arg>
      <map/>
    </constructor-arg>
    <constructor-arg value="true"/>
  </bean>

  <bean id="rjs1Deserializer" class="events.formatter.family.rjs1.Rjs1Deserializer">
    <constructor-arg ref="rjs1SchemaProvider"/>
  </bean>

  <bean id="rjs1Serializer" class="events.formatter.family.rjs1.Rjs1Serializer"/>
  <bean id="decoratedRjs1Serializer"
    class="events.formatter.family.rjs1.SerializedValidatorDecorator">
    <constructor-arg ref="rjs1Serializer"/>
    <constructor-arg ref="rjs1SchemaProvider"/>
  </bean>

  <bean id="messageFamilyAwareDeserializer" class="events.formatter.MessageFamilyAwareDeserializer">
    <constructor-arg>
      <map>
        <entry key="#{T(events.formatter.family.rjs1.Rjs1Deserializer).NAME}"
          value-ref="rjs1Deserializer"/>
      </map>
    </constructor-arg>
  </bean>

  <bean id="guavaDispatcher" class="events.dispatcher.guava.GuavaDispatcher">
  </bean>

  <alias name="guavaDispatcher" alias="dispatcher"/>
  <alias name="decoratedRjs1Serializer" alias="serializer"/>
  <alias name="messageFamilyAwareDeserializer" alias="deserializer"/>
  <alias name="rjs1SchemaFileProvider" alias="rjs1SchemaProvider"/>

  <bean id="clearing.kafkaConsumer" class="events.consumer.kafka.KafkaTopicConsumer">
    <constructor-arg ref="deserializer"/>
    <constructor-arg ref="dispatcher"/>
    <constructor-arg value="#{systemEnvironment['KAFKA_HOST']}:#{systemEnvironment['KAFKA_PORT']}"/>
    <constructor-arg value="#{systemEnvironment['KAFKA_CLEARING_INTERNAL_TOPIC_NAME']}"/>
    <constructor-arg value="clearing"/>
  </bean>

  <bean id="clearing.kafkaEventPublisher" class="events.publisher.kafka.KafkaTopicPublisher">
    <constructor-arg ref="serializer"/>
    <constructor-arg value="#{systemEnvironment['KAFKA_HOST']}:#{systemEnvironment['KAFKA_PORT']}"/>
    <constructor-arg value="#{systemEnvironment['KAFKA_CLEARING_EXTERNAL_TOPIC_NAME']}"/>
  </bean>
  <bean id="clearing.kafkaCommandPublisher" class="events.publisher.kafka.KafkaTopicPublisher">
    <constructor-arg ref="serializer"/>
    <constructor-arg value="#{systemEnvironment['KAFKA_HOST']}:#{systemEnvironment['KAFKA_PORT']}"/>
    <constructor-arg value="#{systemEnvironment['KAFKA_CLEARING_INTERNAL_TOPIC_NAME']}"/>
  </bean>

  <bean id="clearing.splitKafkaPublisher" class="events.publisher.SplitPublisher">
    <constructor-arg>
      <map>
        <entry key="event" value-ref="clearing.kafkaEventPublisher"/>
        <entry key="command" value-ref="clearing.kafkaCommandPublisher"/>
      </map>
    </constructor-arg>
  </bean>

  <alias name="clearing.splitKafkaPublisher" alias="clearing.messagePublisher"/>
  <alias name="clearing.kafkaConsumer" alias="clearing.messageConsumer"/>

  <bean id="clearing.bufferPublisher" class="events.publisher.Buffer">
    <constructor-arg ref="clearing.splitKafkaPublisher"/>
  </bean>

  <bean id="paymentRepository" class="clearing.service.infrastructure.PostgresPaymentRepository">
    <constructor-arg value="#{systemEnvironment['PG_CLEARING_HOST']}"/>
    <constructor-arg value="#{systemEnvironment['PG_CLEARING_PORT']}"/>
    <constructor-arg value="#{systemEnvironment['PG_CLEARING_USER']}"/>
    <constructor-arg value="#{systemEnvironment['PG_CLEARING_PASS']}"/>
    <constructor-arg value="#{systemEnvironment['PG_CLEARING_DB']}"/>
  </bean>

  <bean id="schemeChargesProvider"
    class="clearing.service.infrastructure.InMemorySchemeChargesProvider">
  </bean>

  <bean id="clearPaymentCommandHandler"
    class="clearing.service.application.ClearPaymentCommandHandler">
    <constructor-arg ref="paymentRepository"/>
    <constructor-arg ref="schemeChargesProvider"/>
    <constructor-arg ref="clearing.bufferPublisher"/>
  </bean>









  <bean id="pricing.kafkaConsumer" class="events.consumer.kafka.KafkaTopicConsumer">
    <constructor-arg ref="deserializer"/>
    <constructor-arg ref="dispatcher"/>
    <constructor-arg value="#{systemEnvironment['KAFKA_HOST']}:#{systemEnvironment['KAFKA_PORT']}"/>
    <constructor-arg value="#{systemEnvironment['KAFKA_PRICING_INTERNAL_TOPIC_NAME']},#{systemEnvironment['KAFKA_CLEARING_EXTERNAL_TOPIC_NAME']}"/>
    <constructor-arg value="pricing"/>
  </bean>

  <bean id="pricing.kafkaEventPublisher" class="events.publisher.kafka.KafkaTopicPublisher">
    <constructor-arg ref="serializer"/>
    <constructor-arg value="#{systemEnvironment['KAFKA_HOST']}:#{systemEnvironment['KAFKA_PORT']}"/>
    <constructor-arg value="#{systemEnvironment['KAFKA_PRICING_EXTERNAL_TOPIC_NAME']}"/>
  </bean>
  <bean id="pricing.kafkaCommandPublisher" class="events.publisher.kafka.KafkaTopicPublisher">
    <constructor-arg ref="serializer"/>
    <constructor-arg value="#{systemEnvironment['KAFKA_HOST']}:#{systemEnvironment['KAFKA_PORT']}"/>
    <constructor-arg value="#{systemEnvironment['KAFKA_PRICING_INTERNAL_TOPIC_NAME']}"/>
  </bean>

  <bean id="pricing.splitKafkaPublisher" class="events.publisher.SplitPublisher">
    <constructor-arg>
      <map>
        <entry key="event" value-ref="pricing.kafkaEventPublisher"/>
        <entry key="command" value-ref="pricing.kafkaCommandPublisher"/>
      </map>
    </constructor-arg>
  </bean>

  <alias name="pricing.splitKafkaPublisher" alias="pricing.messagePublisher"/>
  <alias name="pricing.kafkaConsumer" alias="pricing.messageConsumer"/>

  <bean id="pricing.bufferPublisher" class="events.publisher.Buffer">
    <constructor-arg ref="pricing.splitKafkaPublisher"/>
  </bean>

  <bean id="merchantRepository" class="pricing.service.infrastructure.InMemoryMerchantRepository">
  </bean>

  <bean id="paymentClearedEventHandler"
    class="pricing.service.application.PaymentClearedEventHandler">
    <constructor-arg ref="pricing.bufferPublisher"/>
  </bean>

  <bean id="calculateChargesCommandHandler"
    class="pricing.service.application.CalculateChargesCommandHandler">
    <constructor-arg ref="merchantRepository"/>
    <constructor-arg ref="pricing.bufferPublisher"/>
  </bean>


</beans>