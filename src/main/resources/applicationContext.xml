<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="
                http://www.springframework.org/schema/beans
                http://www.springframework.org/schema/beans/spring-beans.xsd">

  <bean id="wpCompactSchemaFileProvider" class="events.formatter.schemaprovider.FileDirectoryTreeBasedSchemaProvider">
    <constructor-arg value="src/main/resources/schema/wpcompact"/>
    <constructor-arg value="json"/>
  </bean>

  <bean id="rjs1Deserializer" class="events.formatter.family.rjs1.Rjs1Deserializer">
    <constructor-arg value="#{T(events.formatter.family.rjs1.BaseSchema).schema}"/>
  </bean>

  <bean id="rjs1Serializer" class="events.formatter.family.rjs1.Rjs1Serializer">
    <constructor-arg value="message-family" />
  </bean>
  <bean id="decoratedRjs1Serializer"
    class="events.formatter.family.rjs1.SerializedValidatorDecorator">
    <constructor-arg ref="rjs1Serializer"/>
    <constructor-arg value="#{T(events.formatter.family.rjs1.BaseSchema).schema}"/>
  </bean>


  <bean id="clearing.wpCompactSerializer" class="events.formatter.family.wpcompact.v1.WpSerializer">
    <constructor-arg>
      <list>
<!--        <ref bean="gzipEncoder"/>-->
<!--        <ref bean="base64encoder"/>-->
      </list>
    </constructor-arg>
    <constructor-arg>
      <list>
        <ref bean="nodeInfoProvider"/>
      </list>
    </constructor-arg>
    <constructor-arg ref="initiatorProvider" />
    <constructor-arg ref="consequenceOfProvider" />
    <constructor-arg value="clearing" />
  </bean>
  <bean id="pricing.wpCompactSerializer" class="events.formatter.family.wpcompact.v1.WpSerializer">
    <constructor-arg>
      <list>
        <!--        <ref bean="gzipEncoder"/>-->
        <!--        <ref bean="base64encoder"/>-->
      </list>
    </constructor-arg>
    <constructor-arg>
      <list>
        <ref bean="nodeInfoProvider"/>
      </list>
    </constructor-arg>
    <constructor-arg ref="initiatorProvider" />
    <constructor-arg ref="consequenceOfProvider" />
    <constructor-arg value="pricing" />
  </bean>
  <bean id="billing.wpCompactSerializer" class="events.formatter.family.wpcompact.v1.WpSerializer">
    <constructor-arg>
      <list>
        <!--        <ref bean="gzipEncoder"/>-->
        <!--        <ref bean="base64encoder"/>-->
      </list>
    </constructor-arg>
    <constructor-arg>
      <list>
        <ref bean="nodeInfoProvider"/>
      </list>
    </constructor-arg>
    <constructor-arg ref="initiatorProvider" />
    <constructor-arg ref="consequenceOfProvider" />
    <constructor-arg value="billing" />
  </bean>
  <bean id="funding.wpCompactSerializer" class="events.formatter.family.wpcompact.v1.WpSerializer">
    <constructor-arg>
      <list>
        <!--        <ref bean="gzipEncoder"/>-->
        <!--        <ref bean="base64encoder"/>-->
      </list>
    </constructor-arg>
    <constructor-arg>
      <list>
        <ref bean="nodeInfoProvider"/>
      </list>
    </constructor-arg>
    <constructor-arg ref="initiatorProvider" />
    <constructor-arg ref="consequenceOfProvider" />
    <constructor-arg value="funding" />
  </bean>
  <bean id="onboarding.wpCompactSerializer" class="events.formatter.family.wpcompact.v1.WpSerializer">
    <constructor-arg>
      <list>
        <!--        <ref bean="gzipEncoder"/>-->
        <!--        <ref bean="base64encoder"/>-->
      </list>
    </constructor-arg>
    <constructor-arg>
      <list>
        <ref bean="nodeInfoProvider"/>
      </list>
    </constructor-arg>
    <constructor-arg ref="initiatorProvider" />
    <constructor-arg ref="consequenceOfProvider" />
    <constructor-arg value="onboarding" />
  </bean>

  <bean id="wpCompactDeserializer" class="events.formatter.family.wpcompact.v1.WpDeserializer">
    <constructor-arg>
      <list>
        <ref bean="gzipDecoder"/>
        <ref bean="base64decoder"/>
      </list>
    </constructor-arg>
    <constructor-arg ref="initiatorProvider" />
    <constructor-arg ref="consequenceOfProvider" />
    <constructor-arg ref="wpCompactSchemaProvider" />
    <constructor-arg value="#{T(events.formatter.family.rjs1.BaseSchema).schema}"/>
  </bean>
  <bean id="initiatorProvider" class="events.formatter.family.wpcompact.meta.provider.InMemoryInitiatorProvider" />
  <bean id="consequenceOfProvider" class="events.formatter.family.wpcompact.meta.provider.InMemoryConsequenceOfProvider" />
  <bean id="nodeInfoProvider" class="events.formatter.family.wpcompact.meta.provider.NodeInfoProvider" />
  <bean id="base64encoder" class="events.formatter.encoder.Base64Encoder" />
  <bean id="base64decoder" class="events.formatter.decoder.Base64Decoder" />
  <bean id="gzipEncoder" class="events.formatter.encoder.GzipEncoder" />
  <bean id="gzipDecoder" class="events.formatter.decoder.GzipDecoder" />

  <bean id="messageFamilyAwareDeserializer" class="events.formatter.MessageFamilyAwareDeserializer">
    <constructor-arg value="message-family"/>
    <constructor-arg>
      <map>
        <entry key="#{T(events.formatter.family.rjs1.Rjs1Deserializer).NAME}"
          value-ref="rjs1Deserializer"/>
      </map>
    </constructor-arg>
  </bean>

  <bean id="guavaDispatcher" class="events.dispatcher.guava.GuavaDispatcher">
  </bean>

  <alias name="guavaDispatcher" alias="dispatcher"/>
<!--  <alias name="decoratedRjs1Serializer" alias="serializer"/>-->
<!--  <alias name="messageFamilyAwareDeserializer" alias="deserializer"/>-->
<!--  <alias name="wpCompactSerializer" alias="serializer"/>-->
  <alias name="wpCompactDeserializer" alias="deserializer"/>
  <alias name="wpCompactSchemaFileProvider" alias="wpCompactSchemaProvider"/>

  <bean id="clearing.kafkaConsumer" class="events.consumer.kafka.KafkaTopicConsumer">
    <constructor-arg ref="deserializer"/>
    <constructor-arg ref="dispatcher"/>
    <constructor-arg value="#{systemEnvironment['KAFKA_HOST']}:#{systemEnvironment['KAFKA_PORT']}"/>
    <constructor-arg value="#{systemEnvironment['KAFKA_CLEARING_INTERNAL_TOPIC_NAME']}"/>
    <constructor-arg value="clearing"/>
  </bean>

  <bean id="clearing.kafkaEventPublisher" class="events.publisher.kafka.KafkaTopicPublisher">
    <constructor-arg ref="clearing.wpCompactSerializer"/>
    <constructor-arg value="#{systemEnvironment['KAFKA_HOST']}:#{systemEnvironment['KAFKA_PORT']}"/>
    <constructor-arg value="#{systemEnvironment['KAFKA_CLEARING_EXTERNAL_TOPIC_NAME']}"/>
  </bean>
  <bean id="clearing.kafkaCommandPublisher" class="events.publisher.kafka.KafkaTopicPublisher">
    <constructor-arg ref="clearing.wpCompactSerializer"/>
    <constructor-arg value="#{systemEnvironment['KAFKA_HOST']}:#{systemEnvironment['KAFKA_PORT']}"/>
    <constructor-arg value="#{systemEnvironment['KAFKA_CLEARING_INTERNAL_TOPIC_NAME']}"/>
  </bean>

  <bean id="clearing.splitKafkaPublisher" class="events.publisher.SplitPublisher">
    <constructor-arg>
      <map>
        <entry key="event" value-ref="clearing.kafkaEventPublisher"/>
        <entry key="command" value-ref="clearing.kafkaCommandPublisher"/>
      </map>
    </constructor-arg>
  </bean>

  <alias name="clearing.splitKafkaPublisher" alias="clearing.messagePublisher"/>
  <alias name="clearing.kafkaConsumer" alias="clearing.messageConsumer"/>

  <bean id="clearing.bufferPublisher" class="events.publisher.Buffer">
    <constructor-arg ref="clearing.splitKafkaPublisher"/>
  </bean>

  <bean id="paymentRepository" class="clearing.service.infrastructure.PostgresPaymentRepository">
    <constructor-arg value="#{systemEnvironment['PG_CLEARING_HOST']}"/>
    <constructor-arg value="#{systemEnvironment['PG_CLEARING_PORT']}"/>
    <constructor-arg value="#{systemEnvironment['PG_CLEARING_USER']}"/>
    <constructor-arg value="#{systemEnvironment['PG_CLEARING_PASS']}"/>
    <constructor-arg value="#{systemEnvironment['PG_CLEARING_DB']}"/>
  </bean>

  <bean id="schemeChargesProvider"
    class="clearing.service.infrastructure.InMemorySchemeChargesProvider">
  </bean>

  <bean id="clearPaymentCommandHandler"
    class="clearing.service.application.ClearPaymentCommandHandler">
    <constructor-arg ref="paymentRepository"/>
    <constructor-arg ref="schemeChargesProvider"/>
    <constructor-arg ref="clearing.bufferPublisher"/>
  </bean>









  <bean id="pricing.kafkaConsumer" class="events.consumer.kafka.KafkaTopicConsumer">
    <constructor-arg ref="deserializer"/>
    <constructor-arg ref="dispatcher"/>
    <constructor-arg value="#{systemEnvironment['KAFKA_HOST']}:#{systemEnvironment['KAFKA_PORT']}"/>
    <constructor-arg value="#{systemEnvironment['KAFKA_PRICING_INTERNAL_TOPIC_NAME']},#{systemEnvironment['KAFKA_CLEARING_EXTERNAL_TOPIC_NAME']}"/>
    <constructor-arg value="pricing"/>
  </bean>

  <bean id="pricing.kafkaEventPublisher" class="events.publisher.kafka.KafkaTopicPublisher">
    <constructor-arg ref="pricing.wpCompactSerializer"/>
    <constructor-arg value="#{systemEnvironment['KAFKA_HOST']}:#{systemEnvironment['KAFKA_PORT']}"/>
    <constructor-arg value="#{systemEnvironment['KAFKA_PRICING_EXTERNAL_TOPIC_NAME']}"/>
  </bean>
  <bean id="pricing.kafkaCommandPublisher" class="events.publisher.kafka.KafkaTopicPublisher">
    <constructor-arg ref="pricing.wpCompactSerializer"/>
    <constructor-arg value="#{systemEnvironment['KAFKA_HOST']}:#{systemEnvironment['KAFKA_PORT']}"/>
    <constructor-arg value="#{systemEnvironment['KAFKA_PRICING_INTERNAL_TOPIC_NAME']}"/>
  </bean>

  <bean id="pricing.splitKafkaPublisher" class="events.publisher.SplitPublisher">
    <constructor-arg>
      <map>
        <entry key="event" value-ref="pricing.kafkaEventPublisher"/>
        <entry key="command" value-ref="pricing.kafkaCommandPublisher"/>
      </map>
    </constructor-arg>
  </bean>

  <alias name="pricing.splitKafkaPublisher" alias="pricing.messagePublisher"/>
  <alias name="pricing.kafkaConsumer" alias="pricing.messageConsumer"/>

  <bean id="pricing.bufferPublisher" class="events.publisher.Buffer">
    <constructor-arg ref="pricing.splitKafkaPublisher"/>
  </bean>

  <bean id="merchantRepository" class="pricing.service.infrastructure.PostgresMerchantRepository">
    <constructor-arg value="#{systemEnvironment['PG_PRICING_HOST']}"/>
    <constructor-arg value="#{systemEnvironment['PG_PRICING_PORT']}"/>
    <constructor-arg value="#{systemEnvironment['PG_PRICING_USER']}"/>
    <constructor-arg value="#{systemEnvironment['PG_PRICING_PASS']}"/>
    <constructor-arg value="#{systemEnvironment['PG_PRICING_DB']}"/>
  </bean>

  <bean id="paymentClearedEventHandler"
    class="pricing.service.application.PaymentClearedEventHandler">
    <constructor-arg ref="pricing.bufferPublisher"/>
  </bean>

  <bean id="calculateChargesCommandHandler"
    class="pricing.service.application.CalculateChargesCommandHandler">
    <constructor-arg ref="merchantRepository"/>
    <constructor-arg ref="pricing.bufferPublisher"/>
  </bean>







  <bean id="billing.kafkaConsumer" class="events.consumer.kafka.KafkaTopicConsumer">
    <constructor-arg ref="deserializer"/>
    <constructor-arg ref="dispatcher"/>
    <constructor-arg value="#{systemEnvironment['KAFKA_HOST']}:#{systemEnvironment['KAFKA_PORT']}"/>
    <constructor-arg value="#{systemEnvironment['KAFKA_BILLING_INTERNAL_TOPIC_NAME']},#{systemEnvironment['KAFKA_PRICING_EXTERNAL_TOPIC_NAME']}"/>
    <constructor-arg value="billing"/>
  </bean>

  <bean id="billing.kafkaEventPublisher" class="events.publisher.kafka.KafkaTopicPublisher">
    <constructor-arg ref="billing.wpCompactSerializer"/>
    <constructor-arg value="#{systemEnvironment['KAFKA_HOST']}:#{systemEnvironment['KAFKA_PORT']}"/>
    <constructor-arg value="#{systemEnvironment['KAFKA_BILLING_EXTERNAL_TOPIC_NAME']}"/>
  </bean>
  <bean id="billing.kafkaCommandPublisher" class="events.publisher.kafka.KafkaTopicPublisher">
    <constructor-arg ref="billing.wpCompactSerializer"/>
    <constructor-arg value="#{systemEnvironment['KAFKA_HOST']}:#{systemEnvironment['KAFKA_PORT']}"/>
    <constructor-arg value="#{systemEnvironment['KAFKA_BILLING_INTERNAL_TOPIC_NAME']}"/>
  </bean>

  <bean id="billing.splitKafkaPublisher" class="events.publisher.SplitPublisher">
    <constructor-arg>
      <map>
        <entry key="event" value-ref="billing.kafkaEventPublisher"/>
        <entry key="command" value-ref="billing.kafkaCommandPublisher"/>
      </map>
    </constructor-arg>
  </bean>

  <alias name="billing.splitKafkaPublisher" alias="billing.messagePublisher"/>
  <alias name="billing.kafkaConsumer" alias="billing.messageConsumer"/>

  <bean id="billing.bufferPublisher" class="events.publisher.Buffer">
    <constructor-arg ref="billing.splitKafkaPublisher"/>
  </bean>

  <bean id="billRepository" class="billing.service.infrastructure.PostgresBillRepository">
    <constructor-arg value="#{systemEnvironment['PG_BILLING_HOST']}"/>
    <constructor-arg value="#{systemEnvironment['PG_BILLING_PORT']}"/>
    <constructor-arg value="#{systemEnvironment['PG_BILLING_USER']}"/>
    <constructor-arg value="#{systemEnvironment['PG_BILLING_PASS']}"/>
    <constructor-arg value="#{systemEnvironment['PG_BILLING_DB']}"/>
  </bean>

  <bean id="paymentChargeCalculatedEventHandler"
    class="billing.service.application.PaymentChargeCalculatedEventHandler">
    <constructor-arg ref="billing.bufferPublisher"/>
  </bean>

  <bean id="addToBillCommandHandler"
    class="billing.service.application.BillAggregatorHandler">
    <constructor-arg ref="billRepository"/>
    <constructor-arg ref="billing.bufferPublisher"/>
  </bean>







  <bean id="funding.kafkaConsumer" class="events.consumer.kafka.KafkaTopicConsumer">
    <constructor-arg ref="deserializer"/>
    <constructor-arg ref="dispatcher"/>
    <constructor-arg value="#{systemEnvironment['KAFKA_HOST']}:#{systemEnvironment['KAFKA_PORT']}"/>
    <constructor-arg value="#{systemEnvironment['KAFKA_FUNDING_INTERNAL_TOPIC_NAME']},#{systemEnvironment['KAFKA_CLEARING_EXTERNAL_TOPIC_NAME']}"/>
    <constructor-arg value="funding"/>
  </bean>

  <bean id="funding.kafkaEventPublisher" class="events.publisher.kafka.KafkaTopicPublisher">
    <constructor-arg ref="funding.wpCompactSerializer"/>
    <constructor-arg value="#{systemEnvironment['KAFKA_HOST']}:#{systemEnvironment['KAFKA_PORT']}"/>
    <constructor-arg value="#{systemEnvironment['KAFKA_FUNDING_EXTERNAL_TOPIC_NAME']}"/>
  </bean>
  <bean id="funding.kafkaCommandPublisher" class="events.publisher.kafka.KafkaTopicPublisher">
    <constructor-arg ref="funding.wpCompactSerializer"/>
    <constructor-arg value="#{systemEnvironment['KAFKA_HOST']}:#{systemEnvironment['KAFKA_PORT']}"/>
    <constructor-arg value="#{systemEnvironment['KAFKA_FUNDING_INTERNAL_TOPIC_NAME']}"/>
  </bean>

  <bean id="funding.splitKafkaPublisher" class="events.publisher.SplitPublisher">
    <constructor-arg>
      <map>
        <entry key="event" value-ref="funding.kafkaEventPublisher"/>
        <entry key="command" value-ref="funding.kafkaCommandPublisher"/>
      </map>
    </constructor-arg>
  </bean>

  <alias name="funding.splitKafkaPublisher" alias="funding.messagePublisher"/>
  <alias name="funding.kafkaConsumer" alias="funding.messageConsumer"/>

  <bean id="funding.bufferPublisher" class="events.publisher.Buffer">
    <constructor-arg ref="funding.splitKafkaPublisher"/>
  </bean>

  <bean id="fundingBalanceRepository" class="funding.service.infrastructure.PostgresFundingBalanceRepository">
    <constructor-arg value="#{systemEnvironment['PG_FUNDING_HOST']}"/>
    <constructor-arg value="#{systemEnvironment['PG_FUNDING_PORT']}"/>
    <constructor-arg value="#{systemEnvironment['PG_FUNDING_USER']}"/>
    <constructor-arg value="#{systemEnvironment['PG_FUNDING_PASS']}"/>
    <constructor-arg value="#{systemEnvironment['PG_FUNDING_DB']}"/>
  </bean>

  <bean id="funding.paymentClearedEventHandler"
    class="funding.service.application.PaymentClearedEventHandler">
    <constructor-arg ref="funding.bufferPublisher"/>
  </bean>

  <bean id="addToFundingBalanceCommandHandler"
    class="funding.service.application.FundingBalanceHandler">
    <constructor-arg ref="fundingBalanceRepository"/>
    <constructor-arg ref="funding.bufferPublisher"/>
  </bean>






  <bean id="onboarding.kafkaConsumer" class="events.consumer.kafka.KafkaTopicConsumer">
    <constructor-arg ref="deserializer"/>
    <constructor-arg ref="dispatcher"/>
    <constructor-arg value="#{systemEnvironment['KAFKA_HOST']}:#{systemEnvironment['KAFKA_PORT']}"/>
    <constructor-arg value="#{systemEnvironment['KAFKA_ONBOARDING_INTERNAL_TOPIC_NAME']}"/>
    <constructor-arg value="onboarding"/>
  </bean>

  <bean id="onboarding.kafkaEventPublisher" class="events.publisher.kafka.KafkaTopicPublisher">
    <constructor-arg ref="onboarding.wpCompactSerializer"/>
    <constructor-arg value="#{systemEnvironment['KAFKA_HOST']}:#{systemEnvironment['KAFKA_PORT']}"/>
    <constructor-arg value="#{systemEnvironment['KAFKA_ONBOARDING_EXTERNAL_TOPIC_NAME']}"/>
  </bean>
  <bean id="onboarding.kafkaCommandPublisher" class="events.publisher.kafka.KafkaTopicPublisher">
    <constructor-arg ref="onboarding.wpCompactSerializer"/>
    <constructor-arg value="#{systemEnvironment['KAFKA_HOST']}:#{systemEnvironment['KAFKA_PORT']}"/>
    <constructor-arg value="#{systemEnvironment['KAFKA_ONBOARDING_INTERNAL_TOPIC_NAME']}"/>
  </bean>

  <bean id="onboarding.splitKafkaPublisher" class="events.publisher.SplitPublisher">
    <constructor-arg>
      <map>
        <entry key="event" value-ref="onboarding.kafkaEventPublisher"/>
        <entry key="command" value-ref="onboarding.kafkaCommandPublisher"/>
      </map>
    </constructor-arg>
  </bean>

  <alias name="onboarding.splitKafkaPublisher" alias="onboarding.messagePublisher"/>
  <alias name="onboarding.kafkaConsumer" alias="onboarding.messageConsumer"/>

  <bean id="onboarding.bufferPublisher" class="events.publisher.Buffer">
    <constructor-arg ref="onboarding.splitKafkaPublisher"/>
  </bean>

  <bean id="onboarding.merchantRepository" class="onboarding.service.infrastructure.PostgresMerchantRepository">
    <constructor-arg value="#{systemEnvironment['PG_ONBOARDING_HOST']}"/>
    <constructor-arg value="#{systemEnvironment['PG_ONBOARDING_PORT']}"/>
    <constructor-arg value="#{systemEnvironment['PG_ONBOARDING_USER']}"/>
    <constructor-arg value="#{systemEnvironment['PG_ONBOARDING_PASS']}"/>
    <constructor-arg value="#{systemEnvironment['PG_ONBOARDING_DB']}"/>
  </bean>

  <bean id="assignMerchantToLcpCommandHandler"
    class="onboarding.service.application.AssignMerchantToLcpCommandHandler">
    <constructor-arg ref="onboarding.bufferPublisher"/>
    <constructor-arg ref="onboarding.merchantRepository"/>
  </bean>



</beans>